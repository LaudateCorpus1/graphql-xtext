/*
 * generated by Xtext 2.19.0
 */
package com.intuit.graphql.tests

import com.google.inject.Inject
import com.intuit.graphql.graphQL.Document
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

@ExtendWith(InjectionExtension)
@InjectWith(GraphQLInjectorProvider)
class NamedTypeValidationTest {
	@Inject extension ParseHelper<Document>
	@Inject extension ValidationTestHelper

	@Test
	def void primitiveTypes() {
		'''
			schema {
			  query: QueryType
			}
				
			type QueryType {
			  str: String
			  int: Int
			  float: Float
			  bool: Boolean
			  id: ID
			  long: Long
			  bigInt: BigInteger
			  bigDec: BigDecimal
			  short: Short
			  char: Char
			  byte: Byte
			}
		'''.parse.assertNoErrors
	}

	@Test
	def void nonNullPrimitiveTypes() {
		'''
			schema {
			  query: QueryType
			}
				
			type QueryType {
			  str: String!
			  int: Int!
			  float: Float!
			  bool: Boolean!
			  id: ID!
			  long: Long!
			  bigInt: BigInteger!
			  bigDec: BigDecimal!
			  short: Short!
			  char: Char!
			  byte: Byte!
			}
		'''.parse.assertNoErrors
	}

	@Test
	def void objectTypes() {
		'''
			schema {
			  query: QueryType
			}
			
			type QueryType {
			  obj: ObjectType
			}
			
			type ObjectType {
			  a: String
			}
		'''.parse.assertNoErrors
	}

	@Test
	def void nonNullObjectTypes() {
		'''
			schema {
			  query: QueryType
			}
			
			type QueryType {
			  obj: ObjectType!
			}
			
			type ObjectType {
			  a: String
			}
		'''.parse.assertNoErrors
	}

	@Test
	def void ListTypes() {
		'''
			schema {
			  query: QueryType
			}
				
			type QueryType {
			  str: [String]
			  int: [Int]
			  float: [Float]
			  bool: [Boolean]
			  id: [ID]
			  long: [Long]
			  bigInt: [BigInteger]
			  bigDec: [BigDecimal]
			  short: [Short]
			  char: [Char]
			  byte: [Byte]
			  obj: [ObjectType]
			}
			
			type ObjectType {
			  a: String
			}
		'''.parse.assertNoErrors
	}

	@Test
	def void listWithNonNullElementsTypes() {
		'''
			schema {
			  query: QueryType
			}
				
			type QueryType {
			  str: [String!]
			  int: [Int!]
			  float: [Float!]
			  bool: [Boolean!]
			  id: [ID!]
			  long: [Long!]
			  bigInt: [BigInteger!]
			  bigDec: [BigDecimal!]
			  short: [Short!]
			  char: [Char!]
			  byte: [Byte!]
			  obj: [ObjectType!]
			}
			type ObjectType {
			  a: String
			}
		'''.parse.assertNoErrors
	}

	@Test
	def void nonNullListWithNonNullElementsTypes() {
		'''
			schema {
			  query: QueryType
			}
				
			type QueryType {
			  str: [String!]!
			  int: [Int!]!
			  float: [Float!]!
			  bool: [Boolean!]!
			  id: [ID!]!
			  long: [Long!]!
			  bigInt: [BigInteger!]!
			  bigDec: [BigDecimal!]!
			  short: [Short!]!
			  char: [Char!]!
			  byte: [Byte!]!
			  obj: [ObjectType!]!
			}
			type ObjectType {
			  a: String
			}
		'''.parse.assertNoErrors
	}

	@Test
	def void nonNullListWithNullableElementsTypes() {
		'''
			schema {
			  query: QueryType
			}
				
			type QueryType {
			  str: [String]!
			  int: [Int]!
			  float: [Float]!
			  bool: [Boolean]!
			  id: [ID]!
			  long: [Long]!
			  bigInt: [BigInteger]!
			  bigDec: [BigDecimal]!
			  short: [Short]!
			  char: [Char]!
			  byte: [Byte]!
			  obj: [ObjectType]!
			}
			type ObjectType {
			  a: String
			}
		'''.parse.assertNoErrors
	}
}
