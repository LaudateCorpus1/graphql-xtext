/*
 * generated by Xtext 2.19.0
 */
package com.intuit.graphql.tests

import com.google.inject.Inject
import com.intuit.graphql.graphQL.Document
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

@ExtendWith(InjectionExtension)
@InjectWith(GraphQLInjectorProvider)
class GraphQLSchemaParsingTest {
	@Inject
	ParseHelper<Document> parseHelper
	
	@Test
	def void loadModel() {
		val result = parseHelper.parse('''
			schema {
			  query: QueryType
			}
			
			type QueryType {
			  consumer: String
			  foo: Long!
			}
			
			scalar Long
		''')
		verify(result)
	}
	
	@Test
	def void scalars() {
		val document = '''
			"""
			A Description
			"""
			scalar Long
			
			scalar LongLong @test
		'''
		
		verify(parseHelper.parse(document))
	}
	
	@Test
	def void directives() {
		val document = '''
			"A single line Descripition"
			directive @test(foo: TestArgument) on OBJECT
			
			"""A multiline 
			Description"""
			
			directive @foo on FIELD_DEFINITION
		'''
			
		verify(parseHelper.parse(document))
	
	}

	@Test
	def void query() {
		val document = '''
			query {
				foo {
					bar
				}
			}
		'''
		
		val result = parseHelper.parse(document)
		
		verify(result)
	}
	
	@Test
	def void mutation() {
		val document = '''
			mutation {
				foo {
					bar
				}
			}
		'''
		
		verify(parseHelper.parse(document))
	}
	
	@Test
	def void subscription() {
		val document = '''
			subscription {
				foo {
					bar
				}
			}
		'''
		
		verify(parseHelper.parse(document))
	}
	
	@Test
	def void extensions() {
		val document = '''
			type Query {
				foo: String
			}
			
			extend type Query {
				bar: String
			}
		'''
		
		verify(parseHelper.parse(document))
	}
	
	@Test
	def void interfaces() {
		val document = '''
			interface Foo {
				foo: String
			}
			
			type Bar implements Foo {
				foo: String
				bar: String
			}
		'''

		verify(parseHelper.parse(document))
	}	
	
	def void verify(Document d) {
		Assertions.assertNotNull(d)
		val errors = d.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
}
