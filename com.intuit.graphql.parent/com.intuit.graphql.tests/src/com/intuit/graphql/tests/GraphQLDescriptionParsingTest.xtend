/*
 * generated by Xtext 2.19.0
 */
package com.intuit.graphql.tests

import com.google.inject.Inject
import com.intuit.graphql.graphQL.Document
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import com.intuit.graphql.graphQL.TypeSystem
import com.intuit.graphql.graphQL.DirectiveDefinition

@ExtendWith(InjectionExtension)
@InjectWith(GraphQLInjectorProvider)
class GraphQLDescriptionParsingTest {
	@Inject
	ParseHelper<Document> parseHelper

	@Test
	def void directiveDescriptionDoubleQuotes() {
		val document = '''
			"A single line Description"
			directive @test(foo: TestArgument) on OBJECT
			
			"""A multiline 
			Description"""
			
			directive @foo on FIELD_DEFINITION
			
		'''

		verifyDirectives(parseHelper.parse(document))

	}

	@Test
	def void directiveDescriptionSingleQuotes() {
		val document = "
			'A single line Description'
			directive @test(foo: TestArgument) on OBJECT
			
			'''A multiline 
			Description'''
			
			directive @foo on FIELD_DEFINITION	
		"

		verifyDirectives(parseHelper.parse(document))

	}

	def void verifyDirectives(Document d) {
		Assertions.assertNotNull(d)

		val types = (d as TypeSystem).typeSystemDefinition
		for (type : types) {
			val dd = type.directive as DirectiveDefinition
			Assertions.assertFalse(dd.desc.contains("\"\""));
			Assertions.assertFalse(dd.desc.contains("\"\'"));
			Assertions.assertFalse(dd.desc.contains("\"\"\""));
			Assertions.assertFalse(dd.desc.contains("\'\'\'"));
		}
	}
}
