/*
 * generated by Xtext 2.19.0
 */
package com.intuit.graphql.tests

import com.google.inject.Inject
import com.intuit.graphql.graphQL.Document
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

@ExtendWith(InjectionExtension)
@InjectWith(GraphQLInjectorProvider)
class GraphQLParsingTest {
	@Inject
	ParseHelper<Document> parseHelper
	
	@Test
	def void loadModel() {
		val result = parseHelper.parse('''
			schema {
			  query: QueryType
			}
			type QueryType {
			  consumer: String
			  foo: Long!
			}
			scalar Long
		''')
		verify(result)
	}
	
	def void verify(Document d) {
		Assertions.assertNotNull(d)
		val errors = d.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
}
