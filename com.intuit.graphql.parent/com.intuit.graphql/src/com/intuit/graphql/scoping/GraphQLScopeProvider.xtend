/*
 * generated by Xtext 2.19.0
 */
package com.intuit.graphql.scoping

import com.intuit.graphql.graphQL.Directive
import com.intuit.graphql.graphQL.DirectiveDefinition
import com.intuit.graphql.graphQL.GraphQLFactory
import com.intuit.graphql.graphQL.TypeSystem
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.naming.QualifiedName
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.util.SimpleAttributeResolver

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class GraphQLScopeProvider extends AbstractGraphQLScopeProvider {

	static val BUILT_IN_DIRECTIVES = #[directive("deprecated"), directive("include"), directive("skip"),
		directive("defer")]
	static val TYPESYSTEM_DEFINITONS = {
		BUILT_IN_DIRECTIVES.map[x|typeSystemDefinition(x)]
	}

	static val nameComputation = [ EObject from |
		if (from === null) {
			return null;
		}
		val name = SimpleAttributeResolver.NAME_RESOLVER.apply(from)
		if (name === null)
			return null
		return QualifiedName.create(name)
	]

	static def directive(String name) {
		var directive = GraphQLFactory.eINSTANCE.createDirectiveDefinition()
		directive.name = name
		return directive
	}

	static def typeSystemDefinition(DirectiveDefinition directive) {
		var typeSystemDefinition = GraphQLFactory.eINSTANCE.createTypeSystemDefinition()
		typeSystemDefinition.directive = directive
		return typeSystemDefinition
	}

	override getScope(EObject context, EReference reference) {
		if (context instanceof Directive) {
			return scopeDirective(context, delegateGetScope(context, reference));
		}
		return delegateGetScope(context, reference)
	}

	def scopeDirective(EObject context, IScope parent) {

		val typeSystem = EcoreUtil2.getRootContainer(context) as TypeSystem
		typeSystem.typeSystemDefinition.addAll(TYPESYSTEM_DEFINITONS)

		return Scopes.scopeFor(BUILT_IN_DIRECTIVES, nameComputation, parent)
	}
}
