/*
 * generated by Xtext 2.24.0
 */
package com.intuit.graphql.scoping;

import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;

import com.intuit.graphql.graphQL.ArgumentsDefinition;
import com.intuit.graphql.graphQL.Directive;
import com.intuit.graphql.graphQL.DirectiveDefinition;
import com.intuit.graphql.graphQL.DirectiveLocation;
import com.intuit.graphql.graphQL.GraphQLFactory;
import com.intuit.graphql.graphQL.InputValueDefinition;
import com.intuit.graphql.graphQL.PrimitiveType;
import com.intuit.graphql.graphQL.TypeSystem;
import com.intuit.graphql.graphQL.TypeSystemDefinition;
import com.intuit.graphql.graphQL.Value;

/**
 * This class contains custom scoping description.
 * 
 * See
 * https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class GraphQLScopeProvider extends AbstractGraphQLScopeProvider {

	private static List<DirectiveDefinition> BUILT_IN_DIRECTIVE_DEFINITIONS = Arrays.asList(createDeprecatedDirective(),
			createFilterableDirective("include"), createFilterableDirective("skip"));

	private static DirectiveDefinition createDeprecatedDirective() {

		PrimitiveType primitive = GraphQLFactory.eINSTANCE.createPrimitiveType();
		primitive.setType("String");

		Value value = GraphQLFactory.eINSTANCE.createValue();
		value.setStringValue("No longer supported");

		InputValueDefinition input = GraphQLFactory.eINSTANCE.createInputValueDefinition();
		input.setName("reason");
		input.setNamedType(primitive);
		input.setDefaultValue(value);

		ArgumentsDefinition arguments = GraphQLFactory.eINSTANCE.createArgumentsDefinition();
		arguments.getInputValueDefinition().add(input);

		DirectiveDefinition deprecated = GraphQLFactory.eINSTANCE.createDirectiveDefinition();
		deprecated.setName("deprecated");
		deprecated.setArgumentsDefinition(arguments);
		deprecated.getDirectiveLocations().addAll(
				Arrays.asList(createDirectiveLocation("FIELD_DEFINITION"), createDirectiveLocation("ENUM_VALUE")));

		return deprecated;
	}

	private static DirectiveLocation createDirectiveLocation(String location) {
		DirectiveLocation directiveLocation = GraphQLFactory.eINSTANCE.createDirectiveLocation();
		directiveLocation.setNamedDirective(location);
		return directiveLocation;
	}

	private static DirectiveDefinition createFilterableDirective(String directiveName) {

		PrimitiveType primitive = GraphQLFactory.eINSTANCE.createPrimitiveType();
		primitive.setType("Boolean");
		primitive.setNonNull(true);

		InputValueDefinition input = GraphQLFactory.eINSTANCE.createInputValueDefinition();
		input.setName("if");
		input.setNamedType(primitive);

		ArgumentsDefinition arguments = GraphQLFactory.eINSTANCE.createArgumentsDefinition();
		arguments.getInputValueDefinition().add(input);

		DirectiveDefinition directive = GraphQLFactory.eINSTANCE.createDirectiveDefinition();
		directive.setName(directiveName);
		directive.setArgumentsDefinition(arguments);
		directive.getDirectiveLocations().addAll(Arrays.asList(createDirectiveLocation("FIELD"),
				createDirectiveLocation("FRAGMENT_SPREAD"), createDirectiveLocation("INLINE_FRAGMENT")));

		return directive;
	}

	private TypeSystemDefinition typeSystemDefinition(DirectiveDefinition directiveDefinition) {
		TypeSystemDefinition typeSystemDefinition = GraphQLFactory.eINSTANCE.createTypeSystemDefinition();
		typeSystemDefinition.setDirective(directiveDefinition);
		return typeSystemDefinition;
	}

	@Override
	public IScope getScope(EObject context, EReference reference) {
		if (context instanceof Directive) {
			EObject rootContainer = EcoreUtil2.getRootContainer(context);

			if (rootContainer instanceof TypeSystem) {
				TypeSystem typeSystem = (TypeSystem) EcoreUtil2.getRootContainer(context);
				Set<String> existingDirectiveNames = typeSystem.getTypeSystemDefinition()
						.stream()
						.filter(t -> Objects.nonNull(t.getDirective()))
						.map(ts -> ts.getDirective().getName())
						.collect(Collectors.toSet());

				BUILT_IN_DIRECTIVE_DEFINITIONS
						.forEach(d -> {
							if(!existingDirectiveNames.contains(d)) {
							   typeSystem.getTypeSystemDefinition()
								.add(typeSystemDefinition(d));
								}
							});

			}
		}
		return super.getScope(context, reference);
	}

}
